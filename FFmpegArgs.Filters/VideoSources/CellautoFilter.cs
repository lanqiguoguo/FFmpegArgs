using FFmpegArgs.Filters.Enums;
using System;

namespace FFmpegArgs.Filters.VideoSources
{
    /// <summary>
    /// ... cellauto          |->V       Create pattern generated by an elementary cellular automaton.<br></br>
    /// https://ffmpeg.org/ffmpeg-filters.html#cellauto
    /// </summary>
    public class CellautoFilter : SourceImageFilter
    {
        internal CellautoFilter(FilterGraph filterGraph) : base("cellauto", filterGraph)
        {
            AddMapOut();
        }

        /// <summary>
        /// Read the initial cellular automaton state, i.e. the starting row, from the specified file.<br>
        /// </br> In the file, each non-whitespace character is considered an alive cell, a newline will terminate the row, and further characters in the file will be ignored.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public CellautoFilter FileName(string fileName)
          => this.SetOption("f", fileName);

        /// <summary>
        /// Read the initial cellular automaton state, i.e. the starting row, from the specified string.
        /// Each non-whitespace character in the string is considered an alive cell, a newline will terminate the row, and further characters in the string will be ignored.
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public CellautoFilter Pattern(string p)
          => this.SetOption("p", p);

        /// <summary>
        /// Set the video rate, that is the number of frames generated per second. Default is 25.
        /// </summary>
        /// <param name="r"></param>
        /// <returns></returns>
        public CellautoFilter Rate(float r)
          => this.SetOptionRange("r", r, 0, float.MaxValue);

        /// <summary>
        /// Set the random fill ratio for the initial cellular automaton row. It is a floating point number value ranging from 0 to 1, defaults to 1/PHI.
        /// This option is ignored when a file or a pattern is specified.
        /// </summary>
        /// <param name="ratio"></param>
        /// <returns></returns>
        public CellautoFilter RandomFillRatio(float ratio)
          => this.SetOptionRange("ratio", ratio, 0.0f, 1.0f);

        /// <summary>
        /// Set the seed for filling randomly the initial row, must be an integer included between 0 and UINT32_MAX.<br>
        /// </br> If not specified, or if explicitly set to -1, the filter will try to use a good random seed on a best effort basis.
        /// </summary>
        /// <param name="seed"></param>
        /// <returns></returns>
        public CellautoFilter RandomSeed(uint seed)
          => this.SetOptionRange("seed", seed, -1, uint.MaxValue);

        /// <summary>
        /// Set the cellular automaton rule, it is a number ranging from 0 to 255. Default value is 110.
        /// </summary>
        /// <param name="rule"></param>
        /// <returns></returns>
        public CellautoFilter Rule(int rule)
          => this.SetOptionRange("rule", rule, 0, 255);

        /// <summary>
        /// Set the size of the output video. For the syntax of this option.<br></br>
        /// If filename or pattern is specified, the size is set by default to the width of the specified initial state row, and the height is set to width* PHI.<br></br>
        /// If size is set, it must contain the width of the specified pattern string, and the specified pattern will be centered in the larger row.<br></br>
        /// If a filename or a pattern string is not specified, the size value defaults to "320x518" (used for a randomly generated initial state).<br></br>
        /// </summary>
        /// <param name="videoSize"></param>
        /// <returns></returns>
        public CellautoFilter Size(VideoSizeUtils videoSize)
          => this.SetOption("s", videoSize.GetAttribute<NameAttribute>().Name);

        public CellautoFilter Size(int width, int height)
        {
            if (width <= 0) throw new ArgumentOutOfRangeException($"{nameof(width)} need > 0");
            if (height <= 0) throw new ArgumentOutOfRangeException($"{nameof(height)} need > 0");
            return this.SetOption("s", $"{width}x{height}");
        }

        /// <summary>
        /// If set to 1, scroll the output upward when all the rows in the output have been already filled.<br>
        /// </br> If set to 0, the new generated row will be written over the top row just after the bottom row is filled. Defaults to 1.
        /// </summary>
        /// <param name="flag"></param>
        /// <returns></returns>
        public CellautoFilter Scroll(bool flag)
          => this.SetOption("scroll", flag.ToFFmpegFlag());

        /// <summary>
        /// If set to 1, completely fill the output with generated rows before outputting the first frame.<br>
        /// </br> This is the default behavior, for disabling set the value to 0.
        /// </summary>
        /// <param name="flag"></param>
        /// <returns></returns>
        public CellautoFilter StartFull(bool flag)
          => this.SetOption("full", flag.ToFFmpegFlag());

        /// <summary>
        /// If set to 1, stitch the left and right row edges together. This is the default behavior, for disabling set the value to 0.
        /// </summary>
        /// <param name="flag"></param>
        /// <returns></returns>
        public CellautoFilter Stitch(bool flag)
          => this.SetOption("stitch", flag.ToFFmpegFlag());
    }

    public static class CellautoFilterExtensions
    {
        /// <summary>
        /// Create a pattern generated by an elementary cellular automaton.<br></br>
        /// The initial state of the cellular automaton can be defined through the filename and pattern options.<br></br>
        /// If such options are not specified an initial state is created randomly.<br></br>
        /// At each new frame a new row in the video is filled with the result of the cellular automaton next generation.<br></br>
        /// The behavior when the whole frame is filled is defined by the scroll option.
        /// </summary>
        /// <param name="filterGraph"></param>
        /// <returns></returns>
        public static CellautoFilter CellautoFilter(this FilterGraph filterGraph)
          => new CellautoFilter(filterGraph);
    }
}
