using System;
using System.Linq;
using System.Drawing;
using System.Collections.Generic;
using FFmpegArgs;
using FFmpegArgs.Cores;
using FFmpegArgs.Cores.Filters;
using FFmpegArgs.Cores.Maps;
using FFmpegArgs.Expressions;
using FFmpegArgs.Filters;
using FFmpegArgs.Filters.Enums;
namespace FFmpegArgs.Filters.Autogens
{
public class AevalsrcFilterGen : SourceAudioFilter
{
internal AevalsrcFilterGen(FilterGraph input) : base("aevalsrc",input) { AddMapOut(); }
/// <summary>
///  set the '|'-separated list of channels expressions
/// </summary>
public AevalsrcFilterGen exprs(string exprs) => this.SetOption("exprs",exprs);
/// <summary>
///  set the number of samples per requested frame (from 0 to INT_MAX) (default 1024)
/// </summary>
public AevalsrcFilterGen nb_samples(int nb_samples) => this.SetOptionRange("nb_samples", nb_samples,0,INT_MAX);
/// <summary>
///  set the sample rate (default "44100")
/// </summary>
public AevalsrcFilterGen sample_rate(string sample_rate) => this.SetOption("sample_rate",sample_rate);
/// <summary>
///  set audio duration (default -0.000001)
/// </summary>
public AevalsrcFilterGen duration(TimeSpan duration) => this.SetOptionRange("duration",duration,TimeSpan.Zero,TimeSpan.MaxValue);
/// <summary>
///  set channel layout
/// </summary>
public AevalsrcFilterGen channel_layout(string channel_layout) => this.SetOption("channel_layout",channel_layout);
}
public static class AevalsrcFilterGenExtensions
{
/// <summary>
/// Generate an audio signal generated by an expression.
/// </summary>
public static AevalsrcFilterGen AevalsrcFilterGen(this FilterGraph input0) => new AevalsrcFilterGen(input0);
/// <summary>
/// Generate an audio signal generated by an expression.
/// </summary>
public static AevalsrcFilterGen AevalsrcFilterGen(this FilterGraph input0,AevalsrcFilterGenConfig config)
{
var result = new AevalsrcFilterGen(input0);
if(!string.IsNullOrWhiteSpace(config?.exprs)) result.exprs(config.exprs);
if(config?.nb_samples != null) result.nb_samples(config.nb_samples.Value);
if(!string.IsNullOrWhiteSpace(config?.sample_rate)) result.sample_rate(config.sample_rate);
if(config?.duration != null) result.duration(config.duration.Value);
if(!string.IsNullOrWhiteSpace(config?.channel_layout)) result.channel_layout(config.channel_layout);
return result;
}
}
public class AevalsrcFilterGenConfig
{
/// <summary>
///  set the '|'-separated list of channels expressions
/// </summary>
public string exprs { get; set; }
/// <summary>
///  set the number of samples per requested frame (from 0 to INT_MAX) (default 1024)
/// </summary>
public int? nb_samples { get; set; }
/// <summary>
///  set the sample rate (default "44100")
/// </summary>
public string sample_rate { get; set; }
/// <summary>
///  set audio duration (default -0.000001)
/// </summary>
public TimeSpan? duration { get; set; }
/// <summary>
///  set channel layout
/// </summary>
public string channel_layout { get; set; }
}
}
