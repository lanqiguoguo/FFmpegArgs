using System;
using System.Linq;
using System.Drawing;
using System.Collections.Generic;
using FFmpegArgs;
using FFmpegArgs.Cores;
using FFmpegArgs.Cores.Filters;
using FFmpegArgs.Cores.Maps;
using FFmpegArgs.Expressions;
using FFmpegArgs.Filters;
using FFmpegArgs.Filters.Enums;
namespace FFmpegArgs.Filters.Autogens
{
public class CellautoFilterGen : SourceImageFilter
{
internal CellautoFilterGen(FilterGraph input) : base("cellauto",input) { AddMapOut(); }
/// <summary>
///  read initial pattern from file
/// </summary>
public CellautoFilterGen filename(string filename) => this.SetOption("filename",filename);
/// <summary>
///  read initial pattern from file
/// </summary>
public CellautoFilterGen f(string f) => this.SetOption("f",f);
/// <summary>
///  set initial pattern
/// </summary>
public CellautoFilterGen pattern(string pattern) => this.SetOption("pattern",pattern);
/// <summary>
///  set initial pattern
/// </summary>
public CellautoFilterGen p(string p) => this.SetOption("p",p);
/// <summary>
///  set video rate (default "25")
/// </summary>
public CellautoFilterGen Rate(string r) => this.SetOption("rate", r);
/// <summary>
///  set video rate (default "25")
/// </summary>
public CellautoFilterGen rate(int r) => this.SetOptionRange("rate", r, 1, int.MaxValue);
/// <summary>
///  set video rate (default "25")
/// </summary>
public CellautoFilterGen R(string r) => this.SetOption("r", r);
/// <summary>
///  set video rate (default "25")
/// </summary>
public CellautoFilterGen r(int r) => this.SetOptionRange("r", r, 1, int.MaxValue);
/// <summary>
///  set video size
/// </summary>
public CellautoFilterGen size(Size size) => this.SetOption("size",$"{size.Width}x{size.Height}");
/// <summary>
///  set video size
/// </summary>
public CellautoFilterGen s(Size size) => this.SetOption("s",$"{size.Width}x{size.Height}");
/// <summary>
///  set rule (from 0 to 255) (default 110)
/// </summary>
public CellautoFilterGen rule(int rule) => this.SetOptionRange("rule", rule,0,255);
/// <summary>
///  set fill ratio for filling initial grid randomly (from 0 to 1) (default 0.618034)
/// </summary>
public CellautoFilterGen random_fill_ratio(double random_fill_ratio) => this.SetOptionRange("random_fill_ratio", random_fill_ratio,0,1);
/// <summary>
///  set fill ratio for filling initial grid randomly (from 0 to 1) (default 0.618034)
/// </summary>
public CellautoFilterGen ratio(double ratio) => this.SetOptionRange("ratio", ratio,0,1);
/// <summary>
///  set the seed for filling the initial grid randomly (from -1 to UINT32_MAX) (default -1)
/// </summary>
public CellautoFilterGen random_seed(long random_seed) => this.SetOptionRange("random_seed", random_seed,-1,UINT32_MAX);
/// <summary>
///  set the seed for filling the initial grid randomly (from -1 to UINT32_MAX) (default -1)
/// </summary>
public CellautoFilterGen seed(long seed) => this.SetOptionRange("seed", seed,-1,UINT32_MAX);
/// <summary>
///  scroll pattern downward (default true)
/// </summary>
public CellautoFilterGen scroll(bool flag) => this.SetOption("scroll",flag.ToFFmpegFlag());
/// <summary>
///  start filling the whole video (default false)
/// </summary>
public CellautoFilterGen start_full(bool flag) => this.SetOption("start_full",flag.ToFFmpegFlag());
/// <summary>
///  start filling the whole video (default true)
/// </summary>
public CellautoFilterGen full(bool flag) => this.SetOption("full",flag.ToFFmpegFlag());
/// <summary>
///  stitch boundaries (default true)
/// </summary>
public CellautoFilterGen stitch(bool flag) => this.SetOption("stitch",flag.ToFFmpegFlag());
}
public static class CellautoFilterGenExtensions
{
/// <summary>
/// Create pattern generated by an elementary cellular automaton.
/// </summary>
public static CellautoFilterGen CellautoFilterGen(this FilterGraph input) => new CellautoFilterGen(input);
}
}
